import pytest, main


# - Test parse version
@pytest.mark.parametrize(
    "version, expected_combined_version",
    [
        ("SSH-2.0-OpenSSH_8.9p1 Ubuntu-3ubuntu0.1", "1:8.9p1-3ubuntu0.1"),
        ("9.18.18-0ubuntu2.1", "1:9.18.18-0ubuntu2.1"),
        ("5.5.5-10.3.29-MariaDB-0ubuntu0.20.10.1", "1:10.3.29-0ubuntu0.20.10.1"),
        ("8.9p1 Ubuntu 3", "1:8.9p1-3"),
    ],
)
def test_parse_version(version, expected_combined_version):
    assert main.parse_version(version) == expected_combined_version


@pytest.mark.parametrize(
    "combined_version, release, fixed_versions, expected_fixed_version",
    [
        (
            "1:8.9p1-3ubuntu0.1",
            "focal",
            [("focal", "1:8.9p1-3ubuntu0.3")],
            "1:8.9p1-3ubuntu0.3",
        ),
        (
            "1:8.9p1-1ubuntu2",
            "lunar",
            [("lunar", "1:8.9p1-1ubuntu2")],
            "1:8.9p1-1ubuntu2",
        ),
        (
            "1:7.6p1-4ubuntu0.7+esm5",
            "bionic",
            [("bionic", "1:7.6p1-4ubuntu0.7+esm1")],
            "1:7.6p1-4ubuntu0.7+esm1",
        ),
        ("9.1p2", "upstream", [("", "")], False),
    ],
)
def test_get_fixed_version(
    combined_version, release, fixed_versions, expected_fixed_version
):
    assert (
        main.get_fixed_version(combined_version, release, fixed_versions)
        == expected_fixed_version
    )


# - Extract sanitize path or version
@pytest.mark.parametrize(
    "user_version, expected_result",
    [
        ("1:8.9p1-3ubuntu0.1", [18, 9130, 1]),
        ("1:9.3p1-1ubuntu2", [19, 3112]),
        ("1:7.6p1-4ubuntu0.7+esm1", [17, 6140, 71]),
        ("1:8.9p1-3", [18, 913]),
    ],
)
def test_sanitize_path(user_version, expected_result):
    assert main.sanitize_path(user_version) == expected_result


# - Compare version
@pytest.mark.parametrize(
    "user_version, fixed_version, expected_result",
    [
        ("2, 43, 0", "2, 50, 1", False),
        ("0, 3", "0, 6", False),
        ("1, 5, 1", "1, 5, 1", True),
        ("1, 0, 4", "1, 0, 1", True),
    ],
)
def test_compare_version(user_version, fixed_version, expected_result):
    assert main.compare_versions(user_version, fixed_version) == expected_result


# - Compare version json
@pytest.mark.parametrize(
    "user_json, fixed_json, expected_result",
    [
        (
            {"version": "8, 91", "path": "30, 10"},
            {"version": "8, 91", "path": "30, 9"},
            True,
        ),
        (
            {"version": "6, 61", "path": "22, 131"},
            {"version": "6, 61", "path": "22, 141"},
            False,
        ),
        (
            {"version": "5, 7, 15", "path": ""},
            {"version": "5, 7, 14", "path": ""},
            True,
        ),
        (
            {"version": "8, 0, 37", "path": "00, 24, 04, 1"},
            {"version": "8, 0, 37", "path": "00, 24, 04, 2"},
            False,
        ),
    ],
)
def test_compare_json_versions(user_json, fixed_json, expected_result):
    assert main.compare_json_versions(user_json, fixed_json) == expected_result
