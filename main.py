from fastapi import FastAPI, HTTPException, Query
import requests, re

app = FastAPI()

# CVE-2023-38408
# SSH-2.0-OpenSSH_8.9p1 Ubuntu-3ubuntu0.1


@app.get("/security/cves.json")
def check_vulnerability(
    cve_id: str = Query(
        ..., description="Add the identification of CVE. Ex: CVE-2016-10009"
    ),
    version: str = Query(
        ...,
        description="Add the version of the ssh and ubuntu. Ex: SSH-2.0-OpenSSH_8.9p1 Ubuntu-3ubuntu0.1",
    ),
):
    """Report if the ssh-ubuntu is vulnerable or not to CVE

    Args:
        cve_id: The identification of the CVE
        version: The version of the ssh and ubuntu

    Returns:
        If the version is vulnerable or not to the CVE
    """
    # Construct the URL to fetch CVE details
    url = f"https://ubuntu.com/security/cves/{cve_id}.json"
    response = requests.get(url)

    if response.status_code != 200:
        raise HTTPException(status_code=404, detail="CVE information not found")

    data_response = response.json()
    # Save the information obtained from a part of the response json
    info_cve = data_response.get("packages", [])

    # Extract SSH and Ubuntu versions from the input
    ssh_version = version.split("_")[1].split()[0]  # Get 8.9p1 from OpenSSH_8.9p1
    ubuntu_version = version.split()[1].split("-")[
        1
    ]  # Get 3ubuntu0.1 from Ubuntu-3ubuntu0.1
    combined_version = (
        f"1:{ssh_version}-{ubuntu_version}"  # Combines to form 1:8.9p1-3ubuntu0.1
    )

    fixed_versions = []

    for package in info_cve:
        for status in package.get("statuses", []):
            description = status.get("description", "")
            status_version = status.get("status", "")
            if description and status_version == "released":
                fixed_versions.append(description)

    # Check if any fixed version matches the user's version partially
    if not fixed_versions:
        raise HTTPException(status_code=404, detail="CVE information not found")

    for version in fixed_versions:
        fixed_version_split = version.rsplit("-", 1)[0]  # 1:8.9p1 -> 1:8.9p1-3ubuntu0.3
        # If the version of the user start like the fixed_version
        if combined_version.startswith(fixed_version_split):
            user_last_number = extract_last_number(combined_version)
            fixed_last_number = extract_last_number(version)
            if user_last_number >= fixed_last_number:
                return (ssh_version, ubuntu_version, "is NOT vulnerable to ", cve_id)

    return (ssh_version, ubuntu_version, "is  vulnerable to ", cve_id)


def extract_last_number(version_string):
    """Extracts the last numerical part from a version string."""
    # Extracts '0.1' from '1:8.9p1-3ubuntu0.1'
    version_match = re.search(r"(\d+(\.\d+)*)$", version_string)
    return version_match.group(1)
