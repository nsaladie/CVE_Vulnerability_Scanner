from fastapi import FastAPI, HTTPException, Query
import requests

app = FastAPI()

# CVE-2023-38408
# SSH-2.0-OpenSSH_8.9p1 Ubuntu-3ubuntu0.1


@app.get("/security/cves.json")
def check_vulnerability(
    cve_id: str = Query(
        ..., description="Add the identification of CVE. Ex: CVE-2016-10009"
    ),
    version: str = Query(
        ...,
        description="Add the version of the ssh and ubuntu. Ex: SSH-2.0-OpenSSH_8.9p1 Ubuntu-3ubuntu0.1",
    ),
):
    """Report if the ssh-ubuntu is vulnerable or not to CVE

    Args:
        cve_id: The identification of the CVE
        version: The version of the ssh and ubuntu

    Returns:
        If the version is vulnerable or not to the CVE
    """

    url = f"https://ubuntu.com/security/cves/{cve_id}.json"
    response = requests.get(url)

    if response.status_code != 200:
        raise HTTPException(status_code=404, detail="CVE information not found")

    data_response = response.json()
    # Save the information obtained from a part of the response json
    info_cve = data_response.get("packages", [])

    ssh_version = version.split("_")[1].split()[0]  # OpenSSH_8.9p1 -> 8.9p1
    ubuntu_version = version.split()[1].split("-")[1]  # Ubuntu-3ubuntu0.1 -> 3ubuntu0.1
    combined_version = f"1:{ssh_version}-{ubuntu_version}"

    fixed_versions = []

    for package in info_cve:
        for status in package.get("statuses", []):
            description = status.get("description", "")
            status_version = status.get("status", "")
            if description and status_version == "released":
                fixed_versions.append(description)

    if combined_version in fixed_versions:
        return (ssh_version, ubuntu_version, "is NOT vulnerable to ", cve_id)
    elif not fixed_versions:  # Check if the list is empty
        raise HTTPException(status_code=404, detail="CVE information not found")
    else:
        return (ssh_version, ubuntu_version, "is vulnerable to ", cve_id)
