from gpt4all import GPT4All
import requests, re

fixed_versions = []

# CVE-2023-38408
# SSH-2.0-OpenSSH_8.9p1 Ubuntu-3ubuntu0.1


def check_vulnerability(cve_id: str, version: str):
    """Report if the ssh-ubuntu is vulnerable or not to CVE

    Args:
        cve_id: The identification of the CVE
        version: The version of the ssh and ubuntu

    Returns:
        If the version is vulnerable or not to the CVE
    """
    # Construct the URL to fetch CVE details
    url = f"https://ubuntu.com/security/cves/{cve_id}.json"
    response = requests.get(url)

    if response.status_code != 200:
        raise Exception("CVE information not found")

    data_response = response.json()
    # Save the information obtained from a part of the response json
    info_cve = data_response.get("packages", [])

    combined_version = get_correct_user_version(version)

    fixed_versions = []

    for package in info_cve:
        for status in package.get("statuses", []):
            description = status.get("description", "")
            status_version = status.get("status", "")
            if description and status_version == "released":
                fixed_versions.append(description)

    # Check if any fixed version matches the user's version partially
    if not fixed_versions:
        return None

    for version in fixed_versions:
        fixed_version_split = version.rsplit("-", 1)[0]  # 1:8.9p1 -> 1:8.9p1-3ubuntu0.3
        # If the version of the user start like the fixed_version
        if combined_version.startswith(fixed_version_split):
            user_last_number = extract_last_number(
                combined_version
            )  # Extracts '0.10' from '1:8.9p1-3ubuntu0.10'
            fixed_last_number = extract_last_number(
                version
            )  # Extracts '0.3' from '1:8.9p1-3ubuntu0.3'
            if compare_versions(user_last_number, fixed_last_number):
                return False

    return True


def get_correct_user_version(version):
    """Extract SSH and Ubuntu versions from the input"""
    ssh_version = version.split("_")[1].split()[0]  # 8.9p1 -> OpenSSH_8.9p1
    ubuntu_version = version.split()[1].split("-")[1]  # 3ubuntu0.1 -> Ubuntu-3ubuntu0.1
    # Combines to form 1:8.9p1-3ubuntu0.1
    combined_version = f"1:{ssh_version}-{ubuntu_version}"
    return combined_version


def extract_last_number(version_string):
    """Extracts the last numerical part from a version string."""
    # Extracts '0.1' from '1:8.9p1-3ubuntu0.1'
    version_match = re.search(r"(\d+(?:\.\d+)*)$", version_string)
    return version_match.group(1) if version_match else ""


def compare_versions(user_version, fixed_version):
    """Compares two version strings numerically."""
    user_parts = list(map(int, user_version.split(".")))
    fixed_parts = list(map(int, fixed_version.split(".")))
    return user_parts >= fixed_parts


if __name__ == "__main__":
    import sys

    # If the program does not receive 3 parameters
    if len(sys.argv) != 3:
        print(
            "ERROR: You need to pass the parameters: CVE identification and a SSH-Ubuntu version"
        )
        sys.exit(1)

    cve_id = sys.argv[1]
    version = sys.argv[2]

    is_vulnerable = check_vulnerability(cve_id, version)

    if is_vulnerable:
        print(f"The version: {version} is vulnerable to {cve_id}")
    elif is_vulnerable == None:
        print(f"CVE: {cve_id} information not found")
    else:
        print(f"The version: {version} is NOT vulnerable to {cve_id}")

    model = GPT4All("Meta-Llama-3-8B-Instruct.Q4_0.gguf")
    with model.chat_session():
        message = f"This is {cve_id} is vulnerable to this version {version}? Ansewer: YES or NO"
        print(model.generate(message, max_tokens=1024))
